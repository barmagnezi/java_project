package NotUsed;

import java.util.Observer;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.ColorDialog;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.MessageBox;

import algorithms.mazeGenerators.Maze;
import algorithms.search.Solution;
import view.View;
import view.viewGUI.mazeDisplayerAndCharecters.MazeGame;
import view.viewGUI.mazeDisplayerAndCharecters.MazeDisplayerGUI;
import view.viewGUI.mazeViewWidjet.CommonGame;
import view.viewGUI.mazeViewWidjet.GameDisplayer;
import view.viewGUI.mazeViewWidjet.SelectAnim;
import view.viewGUI.mazeViewWidjet.SelectPic;
import view.viewGUI.mazeViewWidjet.ViewGUI;
import view.viewGUI.mazeViewWidjet.winnerPage;

/**
 * Setting all the main features of our current gameView - as
 * MazeDispalyer(GUI). (OUTSIDE BIG WINDOW)
 * 
 * @author Bar Magnezi and Senia Kalma
 * @version 1.0
 * @since 31.5.2015
 */
public class GameViewWidget extends Canvas{

	public String gameName="Not loaded game";
	CommonGame game = null;
	
	int steps = 0;
	int clue = 0;
	
	ViewGUI ViewGUI = new ViewGUI(this);

	public Boolean checkMotionFlag = new Boolean(false); // for check motion
															// function
	Label LBgameName;
	Label LHelp;
	Label LBsteps;
	Button Bstartover;
	Button BshowSolution;
	Button BgiveClue;
	
	GameDisplayer GameDisplayer;
	Group GroupCharacters;
	Button[] CharactersButtons;
	Group GroupBackgroundGame;
	Button[] BackgroundsButtons;

	String path;
	int Op;

	public void setProperties(String path) {
		ViewGUI.setproperties(path);
	}

	public void addObserver(Observer presenter) {
		ViewGUI.addObserver(presenter);
	}

	public GameViewWidget(Composite parent, int style) {
		super(parent, style);
		this.setLayout(new GridLayout(2, false));
		getShell().setBackgroundMode(SWT.INHERIT_FORCE);
		LBgameName = new Label(this, SWT.NONE);
		LBgameName.setLayoutData(new GridData(SWT.FILL, SWT.None, false, false,
				1, 1));

		LHelp = new Label(this, SWT.PUSH);
		LHelp.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, true, false, 1, 1));
		LHelp.setText("Have a question?press F1 :)");

		LBsteps = new Label(this, SWT.NONE);
		LBsteps.setLayoutData(new GridData(SWT.FILL, SWT.TOP, false, false, 1,
				1));

		Bstartover = new Button(this, SWT.PUSH);
		Bstartover.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false,
				1, 1));
		Bstartover.setText("start over");
		Bstartover.addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				getParent().getDisplay().syncExec(new Runnable() {
					@Override
					public void run() {
						GameDisplayer.Startover();
						steps = 0;
						clue = 0;
						load();
						GameDisplayer.setFocus();
					}
				});
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		/*
		 * Bstartover.addFocusListener(new FocusListener() {
		 * 
		 * @Override public void focusLost(FocusEvent arg0) {
		 * MazeDisplayer.setFocus(); }
		 * 
		 * @Override public void focusGained(FocusEvent arg0) {
		 * MazeDisplayer.setFocus(); } });
		 */

		BshowSolution = new Button(this, SWT.PUSH);
		BshowSolution.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false,
				false, 2, 1));
		BshowSolution.setText("show solution");
		BshowSolution.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				GameDisplayer.setFocus();
				ViewGUI.displaySolution(gameName);
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		/*
		 * BshowSolution.addFocusListener(new FocusListener() {
		 * 
		 * @Override public void focusLost(FocusEvent arg0) {
		 * MazeDisplayer.setFocus(); }
		 * 
		 * @Override public void focusGained(FocusEvent arg0) {
		 * MazeDisplayer.setFocus(); } });
		 */

		BgiveClue = new Button(this, SWT.PUSH);
		BgiveClue.setLayoutData(new GridData(SWT.LEFT, SWT.TOP, false, false,
				1, 1));
		BgiveClue.setText("give me clue");
		BgiveClue.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				if (game != null)
					clue(game);
				// ViewGUI.getclue(MazeDisplayer.getCharacter().getRealx(),
				// MazeDisplayer.getCharacter().getRealy());
				GameDisplayer.setFocus();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		/*
		 * BgiveClue.addFocusListener(new FocusListener() {
		 * 
		 * @Override public void focusLost(FocusEvent arg0) {
		 * MazeDisplayer.setFocus(); }
		 * 
		 * @Override public void focusGained(FocusEvent arg0) {
		 * MazeDisplayer.setFocus(); } });
		 */

		GameDisplayer = new MazeDisplayerGUI(this, SWT.BORDER_SOLID,
				"resources/images/mazedisplayerbackground.png", "resources/images/grass.png", "resources/images/trees.png");
		GameDisplayer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true,
				true, 2, 1));
		// if() animation set..
		//MazeDisplayer.start();	//Senia 15.06
		// === Character Settings ===
		GroupCharacters = new Group(this, SWT.SHADOW_OUT);
		GroupCharacters.setText("Characters");
		GroupCharacters.setLayout(new GridLayout(3, true));
		GroupCharacters.setLayoutData(new GridData(SWT.LEFT, SWT.DOWN, false,
				false, 2, 1));
		GroupCharacters.setBackground(new org.eclipse.swt.graphics.Color(null,
				new RGB(255, 255, 255)));
		CharactersButtons = new Button[3];
		for (int i = 0; i < 3; i++) {
			CharactersButtons[i] = new Button(GroupCharacters, SWT.RADIO);
			CharactersButtons[i].setText("option " + (i + 1));
		}
		CharactersButtons[0].setSelection(true);

		CharactersButtons[0].setText("Circle");
		CharactersButtons[0].addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				if (CharactersButtons[0].getSelection() == true) {
					ColorDialog cd = new ColorDialog(getShell());
					cd.setText("ColorDialog Demo");
					cd.setRGB(new RGB(255, 255, 255));
					RGB col = cd.open();
					GameDisplayer.changeCharacter(1, col, null);
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});

		CharactersButtons[1].setText("Picture");
		CharactersButtons[1].addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				if (CharactersButtons[1].getSelection() == true) {
					SelectPic SP = new SelectPic("Select a picture", 300, 230, getDisplay(), GameDisplayer.getCharOp());
					SP.run();
					if (SP.getStr() == null) {
						//1001 - Picture character by the path
						if(SP.getChoise()==2)	//2=Mario => Picture - Mario
							GameDisplayer.changeCharacter(1001, null, "resources/images/MarioChar.png");
						if(SP.getChoise()==989)	//989=Senia => Picture - Senia
							GameDisplayer.changeCharacter(1001, null, "resources/images/Senia.png");
						if(SP.getChoise()==999)	//999=Bar => Pictre - Bar
							GameDisplayer.changeCharacter(1001, null, "resources/images/Bar.png");
						//MazeDisplayer.changeCharacter(SP.getChoise(), null,null);
					} else
						GameDisplayer.changeCharacter(1001, null, SP.getStr());
					GameDisplayer.setFocus();
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});

		CharactersButtons[2].setText("Animation");
		/*
		 * int before1 = 0; int coi;
		 * if(CharactersButtons[0].getSelection()==true) before1=0;
		 * if(CharactersButtons[1].getSelection()==true) before1=1;
		 * if(CharactersButtons[2].getSelection()==true) before1=2;
		 * 
		 * if Clicked No on save setting ==> SP.getChoise()==-2.
		 * CharactersButtons[0].setSelection(false);
		 * CharactersButtons[0].setSelection(false);
		 * CharactersButtons[0].setSelection(false); if(before1==0)
		 * CharactersButtons[0].setSelection(true); if(before1==1)
		 * CharactersButtons[1].setSelection(true); if(before1==1)
		 * CharactersButtons[2].setSelection(true);
		 */

		CharactersButtons[2].addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				if (CharactersButtons[2].getSelection() == true) {
					SelectAnim SP = new SelectAnim("Select an animation", 250, 200, getDisplay(), GameDisplayer.getCharOp());
					SP.run();
					if (SP.getStr() == null) {
						// 1002 - Animation character by the path.
						if(SP.getChoise()==3)	//3=Mario => Animation - Mario
							GameDisplayer.changeCharacter(1002, null, "resources/images/marioAnimation.gif");
						if(SP.getChoise()==4)	//4=Dog => Animation - Dog
							GameDisplayer.changeCharacter(1002, null, "resources/images/dogAnimation.gif");
						//MazeDisplayer.changeCharacter(SP.getChoise(), null,null);
					} else
						GameDisplayer.changeCharacter(1002, null, SP.getStr());
					GameDisplayer.setFocus();
				}
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});

		// === BackGround Settings ===
		GroupBackgroundGame = new Group(this, SWT.SHADOW_OUT);
		GroupBackgroundGame.setText("background");
		GroupBackgroundGame.setLayout(new GridLayout(3, true));
		GroupBackgroundGame.setLayoutData(new GridData(SWT.LEFT, SWT.DOWN,
				false, false));

		BackgroundsButtons = new Button[3];
		for (int i = 0; i < 3; i++) {
			BackgroundsButtons[i] = new Button(GroupBackgroundGame, SWT.RADIO);
		}
		BackgroundsButtons[0].setText("garden");
		BackgroundsButtons[0].addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				GameDisplayer.changeBackDesign("resources/images/grass.png",
						"resources/images/trees.png");
				GroupBackgroundGame.setBackgroundImage(new Image(null,
						"resources/images/grass.png"));
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		BackgroundsButtons[1].setText("desert");
		BackgroundsButtons[1].addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				GameDisplayer.changeBackDesign("resources/images/desert.jpg",
						"resources/images/brick_texture.jpg");
				GroupBackgroundGame.setBackgroundImage(new Image(null,
						"resources/images/desert.jpg"));
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		BackgroundsButtons[2].setText("Black&White");
		BackgroundsButtons[2].addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent arg0) {
				GameDisplayer.changeBackDesign("resources/images/white.png",
						"resources/images/black.png");
				GroupBackgroundGame.setBackgroundImage(new Image(null,
						"resources/images/white.png"));
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});

		BackgroundsButtons[0].setSelection(true);
		GroupBackgroundGame.setBackgroundImage(new Image(null,
				"resources/images/grass.png"));

		GameDisplayer.addKeyListener(new KeyListener() {

			@Override
			public void keyReleased(KeyEvent arg0) {
			}

			@Override
			public void keyPressed(KeyEvent arg0) {
				if (arg0.keyCode == 16777220) { // right
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX + 1, currentY)) {
						GameDisplayer.CharMoved(1);
						steps++;
						checkwin(currentX + 1, currentY);
					}
				}
				if (arg0.keyCode == 16777219) { // left
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX - 1, currentY)) {
						GameDisplayer.CharMoved(3);
						steps++;
						checkwin(currentX - 1, currentY);
					}
				}
				if (arg0.keyCode == 16777217) { // up
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX, currentY - 1)) {
						GameDisplayer.CharMoved(2);
						steps++;
						checkwin(currentX, currentY - 1);
					}
				}
				if (arg0.keyCode == 16777218) { // down
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX, currentY + 1)) {
						GameDisplayer.CharMoved(4);
						steps++;
						checkwin(currentX, currentY + 1);
					}
				}
				// diag
				if (arg0.character == '1') { // down-left
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX - 1,
							currentY + 1)) {
						GameDisplayer.CharMoved(5);
						steps++;
						checkwin(currentX - 1, currentY + 1);
					}
				}

				if (arg0.character == '2') { // down-right
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX + 1,
							currentY + 1)) {
						GameDisplayer.CharMoved(6);
						steps++;
						checkwin(currentX + 1, currentY + 1);
					}
				}
				if (arg0.character == '4') { // up-left
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX - 1,
							currentY - 1)) {
						GameDisplayer.CharMoved(7);
						steps++;
						checkwin(currentX - 1, currentY - 1);
					}
				}
				if (arg0.character == '5') { // up-right
					int currentX = GameDisplayer.getCharacter().getRealx();
					int currentY = GameDisplayer.getCharacter().getRealy();
					if (GameDisplayer.CheckMotion(currentX, currentY, currentX + 1,
							currentY - 1)) {
						GameDisplayer.CharMoved(8);
						steps++;
						checkwin(currentX + 1, currentY - 1);
					}
				}
				load();
			}
		});

		// button5 - Load settings
		Button BLoad = new Button(this, SWT.PUSH);
		BLoad.setLayoutData(new GridData(SWT.RIGHT, SWT.DOWN, false, false, 1,
				1));
		BLoad.setText("Load settings");
		BLoad.addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				getParent().getDisplay().syncExec(new Runnable() {
					@Override
					public void run() {
						FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
						fd.setText("open");
						fd.setFilterPath("");
						String[] names = { "Extensible Markup Language (*.xml)" };
						String[] filterExt = { "*.xml" };
						fd.setFilterNames(names);
						fd.setFilterExtensions(filterExt);
						fd.open();
						if (fd.getFileName() == "")
							return;
						setProperties(fd.getFilterPath() + "/"
								+ fd.getFileName());
						GameDisplayer.setFocus();
					}
				});
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		final Point[] offset = new Point[1];
		GameDisplayer.addMouseListener(new MouseListener() {
			@Override
			public void mouseDown(MouseEvent e) {
				Point pt1 = parent.toDisplay(0, 0);
				Point pt2 = getShell().toDisplay(e.x, e.y);
				offset[0] = new Point(pt2.x - pt1.x, pt2.y - pt1.y);
			}

			@Override
			public void mouseUp(MouseEvent e) {
				if (offset[0] == null)
					return;
				Point pt1 = parent.toDisplay(0, 0);
				Point pt2 = getShell().toDisplay(e.x, e.y);
				int Newx = (pt2.x - pt1.x);
				int Newy = (pt2.y - pt1.y);
				// System.out.println("x: "+Newx +
				// " y: "+Newy+" OLD: "+" x: "+offset[0].x + "y: "+offset[0].y);
				int currentX = 0, currentY = 0;
				/*
				 * //If char != null ==On character click check - not working
				 * prop cuz Click res not in sync with pixel res
				 * //e.gc.fillOval((realx*5+1)*Width/4, (realy*5+1)*Hight/4,
				 * Width, Hight); System.out.println(offset[0].x);
				 * System.out.println
				 * ((MazeDisplayer.character.getRealx()*5+1)*MazeDisplayer
				 * .wallWidth/4);
				 * if((MazeDisplayer.character.getRealx()*5+1)*MazeDisplayer
				 * .wallWidth/4<offset[0].x ){
				 * System.out.println("bigger then char x start"); }
				 */
				if (GameDisplayer.character != null) {
					currentX = GameDisplayer.getCharacter().getRealx();
					currentY = GameDisplayer.getCharacter().getRealy();
					/*
					 * System.out.println(
					 * "=========================================");
					 * System.out.println
					 * ("mouse start. x: "+pt1.x+" y: "+pt1.y);
					 * System.out.println("mouse end. x: "+pt2.x+" y: "+pt2.y);
					 * System.out.println("Change, x: "+(Newx)+" y: "+(Newy));
					 */
					// System.out.println((MazeDisplayer.getCharacter().getRealx()*5+1)*MazeDisplayer.wallWidth);
					// System.out.println((MazeDisplayer.getCharacter().getRealy()*5+1)*MazeDisplayer.wallHeight);
					
					// TODO VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV SENIA 15.06
					int CharStartx = ((GameDisplayer.getCharacter().getRealx() * 5 + 1) );//* MazeDisplayer.wallWidth);
					int CharStarty = ((GameDisplayer.getCharacter().getRealy() * 5 + 1) );//* MazeDisplayer.wallHeight);
					// System.out.println("Char start,x: "+CharStartx+",y: "+CharStarty);
					if (CharStartx < Newx && CharStarty < Newy) {
						// if(CharStartx+(MazeDisplayer.wallWidth*4)>Newx &&
						// CharStarty+(MazeDisplayer.wallHeight*4)>Newy){
						// System.out.println("GODA");
						if (Newx - offset[0].x != 0 || Newy - offset[0].y != 0) {
							if (Math.abs(Newx - offset[0].x) > Math.abs(Newy
									- offset[0].y)) {
								if ((Newx - offset[0].x) > 0) { // Moved right
									if (GameDisplayer.CheckMotion(currentX, currentY,
											currentX + 1, currentY)) {
										GameDisplayer.CharMoved(1);
										steps++;
										checkwin(currentX + 1, currentY);
									}
								} else { // Moved left
									if (GameDisplayer.CheckMotion(currentX, currentY,
											currentX - 1, currentY)) {
										GameDisplayer.CharMoved(3);
										steps++;
										checkwin(currentX - 1, currentY);
									}
								}
							} else {
								if ((Newy - offset[0].y) > 0) { // Moved down
									if (GameDisplayer.CheckMotion(currentX, currentY,
											currentX, currentY + 1)) {
										GameDisplayer.CharMoved(4);
										steps++;
										checkwin(currentX, currentY + 1);
									}
								} else { // Moved up
									if (GameDisplayer.CheckMotion(currentX, currentY,
											currentX, currentY - 1)) {
										GameDisplayer.CharMoved(2);
										steps++;
										checkwin(currentX, currentY - 1);
									}
								}
							}
						}
						// }
					}
				}
				// offset[0] = new Point(pt2.x - pt1.x, pt2.y - pt1.y);
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		this.setBackgroundImage(new Image(null,
				"resources/images/background.png"));
		load();

	}

	public void load() {
		if(gameName==null)
			gameName="Not loaded game";
		System.out.println(gameName);
		LBgameName.setText("Game name: " + gameName);
		LBsteps.setText("Number of steps: " + String.valueOf(steps)
				+ "\tNumber of clues: " + String.valueOf(clue));

	}

	public void generateMaze(String name, int rows, int cols) {
		ViewGUI.generateMaze(name, rows, cols);
	}

	public void loadMaze(String name) {
		ViewGUI.displaymaze(name);
		if (GameDisplayer.character != null) {
			GameDisplayer.character.setRealx(0);
			GameDisplayer.character.setRealy(0);
		}
		clue = 0;
		steps = 0;
		load();
	}

	public void solve(String name) {
		ViewGUI.solveMaze(name);
	}

	/**
	 * check if the character at the end of the maze and if not generate clue
	 * The character index take from GameDisplayer
	 * @param maze the maze we want to find clue
	 */
	public void clue(CommonGame maze) {
		// System.out.println("clue");

		int x = GameDisplayer.character.getRealx();
		int y = GameDisplayer.character.getRealy();
		if (GameDisplayer.checkwin(x, y))
			return;
		ViewGUI.getclue(y, x);
		/*
		 * MazeSearchable MS = new MazeSearchableFixed(maze, maze.getCell(y, x),
		 * maze.getCell(maze.getRows()-1, maze.getCols()-1), Diagonals, 10, 15);
		 * //new MazeSearchable(maze, false); commonSearcher se=new
		 * AstarSearcher(new MazeAirDistance()); // CELL(ROW,COL) Solution
		 * Sol=se.search(MS); String last[] = Sol.toString().split("->");
		 * //COL,ROW-->COL,ROW if(last.length>1){ clue++; String[] nxt
		 * =last[1].split("x"); int Cluex=Integer.parseInt(nxt[0]); int
		 * Cluey=Integer.parseInt(nxt[1]); Sol.print();
		 * MazeDisplayer.mark(Cluey, Cluex); load(); checkwin(Cluey , Cluex); }
		 * else{ checkwin(maze.getCols()-1 , maze.getRows()-1); }
		 */
	}
	/**
	 * send the clue to GameDisplayer that show it to user
	 * @param clue The clue
	 */
	public void displayClue(String clue) {
		String[] rowCol = clue.split(",");
		int Cluex = Integer.parseInt(rowCol[1]);
		int Cluey = Integer.parseInt(rowCol[0]);
		GameDisplayer.mark(Cluey, Cluex);
		load();
		checkwin(Cluey, Cluex);
		this.clue++;
	}

	/**
	 * send the game to GameDisplayer that show it to user
	 * @param m The clue
	 */
	public void displayMaze(CommonGame m) {
		game = m;
		clue = 0;
		steps = 0;
		CommonGame g = new MazeGame((Maze) m.getGame());
		GameDisplayer.showGame(g, false);
	}

	/*
	 * public void displaySolution(Solution s) {
	 * //System.out.println("print sol on MazeDisplayer canvas"); int
	 * cols=maze.getCols(); int rows=maze.getRows(); int
	 * x=MazeDisplayer.character.getRealx(); int
	 * y=MazeDisplayer.character.getRealy(); while(x!=cols-1 && y!=rows-1){
	 * //synchronized(MazeDisplayer.character){ try {
	 * System.out.println("Sfdbv"); clue(maze); Thread.sleep(500);
	 * //MazeDisplayer.character.wait(500); } catch (InterruptedException e) {
	 * e.printStackTrace(); } //} x=MazeDisplayer.character.getRealx();
	 * y=MazeDisplayer.character.getRealy(); } if(x!=cols-1 || y!=rows-1){
	 * MazeDisplayer.mark(cols-1, cols-1); }
	 * 
	 * 
	 * }
	 */
	public void displaySolution(Solution s) {
		GameDisplayer.showSolution(s);
	}

	public void displayString(String msg) {
		getDisplay().getDefault().asyncExec(new Runnable() {
			public void run() {
				MessageBox messageBox = new MessageBox(getShell(), SWT.OK);
				messageBox.setMessage(msg);
				messageBox.setText("Message");
				messageBox.open();
			}
		});
	}

	public View getView() {
		return ViewGUI;
	}

	public void setMazeName(String name) {
		gameName = name;
		load();
	}

	public void exit() {
		ViewGUI.exit();
		GameDisplayer.stop();
	}

	public void start() {
		ViewGUI.start();
	}

	/*public boolean CheckMotion(int CurrentX, int CurrentY, int nextX, int nextY) {
		boolean flag = true;
		// System.out.println();
		if (nextX < 0 || nextY < 0 || nextX == maze.getCols()
				|| nextY == maze.getRows())
			return false;
		if (!(nextX != CurrentX && CurrentY != nextY)) {
			if (CurrentX + 1 == nextX)
				flag = flag
						&& (!maze.getCell(CurrentY, CurrentX).getRightWall()
								.isExist());
			if (CurrentX - 1 == nextX)
				flag = flag
						&& (!maze.getCell(nextY, nextX).getRightWall()
								.isExist());
			if (CurrentY + 1 == nextY)
				flag = flag
						&& (!maze.getCell(CurrentY, CurrentX).getBottomWall()
								.isExist());
			if (CurrentY - 1 == nextY)
				flag = flag
						&& (!maze.getCell(nextY, nextX).getBottomWall()
								.isExist());
			return flag;
		} else {
			if (Diagonals == true) {
				int col = CurrentX;
				int row = CurrentY;
				// right-up
				if (CurrentX + 1 == nextX && CurrentY - 1 == nextY) {
					if (maze.getCell(row - 1, col).getRightWall().isExist() && // |_
							maze.getCell(row - 1, col + 1).getBottomWall()
									.isExist())// .
						flag = false;
					if (maze.getCell(row, col).getRightWall().isExist() && // |
							maze.getCell(row - 1, col).getRightWall().isExist()) // .|
						flag = false;
					if (maze.getCell(row - 1, col).getBottomWall().isExist() && // _
																				// _
							maze.getCell(row - 1, col + 1).getBottomWall()
									.isExist()) // .
						flag = false;
					if (maze.getCell(row - 1, col).getBottomWall().isExist() && // /corner
																				// like
																				// ._|
							maze.getCell(row, col).getRightWall().isExist())
						flag = false;
					return flag;
				}
				// right-down
				if (CurrentX + 1 == nextX && CurrentY + 1 == nextY) {
					if (maze.getCell(row + 1, col).getRightWall().isExist() && // .
							maze.getCell(row, col + 1).getBottomWall()
									.isExist())// |-
						flag = false;
					if (maze.getCell(row, col).getRightWall().isExist() && // .
																			// |
							maze.getCell(row + 1, col).getRightWall().isExist()) // |
						flag = false;
					if (maze.getCell(row, col).getBottomWall().isExist() && // .
							maze.getCell(row, col + 1).getBottomWall()
									.isExist()) // --
						flag = false;
					if (maze.getCell(row, col).getBottomWall().isExist() && // /corner
																			// like
																			// ._|
							maze.getCell(row, col).getRightWall().isExist())
						flag = false;
					return flag;
				}
				// left-down
				if (CurrentX - 1 == nextX && CurrentY + 1 == nextY) {
					if (maze.getCell(row + 1, col - 1).getRightWall().isExist()
							&& // .
							maze.getCell(row, col - 1).getBottomWall()
									.isExist()) // -|
						flag = false;
					if (maze.getCell(row, col - 1).getRightWall().isExist() && // |.
							maze.getCell(row + 1, col - 1).getRightWall()
									.isExist()) // |
						flag = false;
					if (maze.getCell(row, col).getBottomWall().isExist() && // .
							maze.getCell(row, col - 1).getBottomWall()
									.isExist()) // --
						flag = false;
					if (maze.getCell(row, col).getBottomWall().isExist() && // /corner
																			// like
																			// ._|
							maze.getCell(row, col - 1).getRightWall().isExist())
						flag = false;
					return flag;
				}
				// left-up
				if (CurrentX - 1 == nextX && CurrentY - 1 == nextY) {
					if (maze.getCell(row - 1, col - 1).getRightWall().isExist()
							&& // _|
							maze.getCell(row - 1, col - 1).getBottomWall()
									.isExist()) // .
						flag = false;
					if (maze.getCell(row, col - 1).getRightWall().isExist() && // |
							maze.getCell(row - 1, col - 1).getRightWall()
									.isExist()) // |.
						flag = false;
					if (maze.getCell(row - 1, col).getBottomWall().isExist() && // _
																				// _
							maze.getCell(row - 1, col - 1).getBottomWall()
									.isExist()) // .
						flag = false;
					if (maze.getCell(row - 1, col).getBottomWall().isExist() && // /corner
																				// like
																				// ._|
							maze.getCell(row, col - 1).getRightWall().isExist())
						flag = false;
					return flag;
				}
			} else
				return false;
		}
		return false;

	}*/

	public void checkwin(int x, int y) {
		if (GameDisplayer.checkwin(x, y))
			new winnerPage("winner", 270, 240, getDisplay(), steps, clue).run();
	}
	public void setDiagonals(boolean diag) {
		GameDisplayer.setDiagonals(diag);
	}
}
